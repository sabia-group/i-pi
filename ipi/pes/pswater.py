""" PSwater potential, dipole and Born charges """

from .dummy import Dummy_driver
import torch
import numpy as np
from ipi.utils.messages import warning
from ipi.utils.units import unit_to_user, unit_to_internal

__DRIVER_NAME__ = "pswater"
__DRIVER_CLASS__ = "pswater_driver"


class pswater_driver(Dummy_driver):
    """Driver for the PSWater potential energy surface and dipole moment calculation."""

    def __call__(self, cell, pos):
        """Evaluates the potential energy surface (PES), forces, dipole moment, and Born effective charges for a water monomer.

        Args:
            cell: Simulation cell (not used in this example).
            pos: Positions of the atoms in the water monomer.

        Returns:
            float: Potential energy.
            numpy.ndarray: Forces on the atoms.
            numpy.ndarray: Virial tensor (not used in this example).
            dict: Additional properties including dipole moment and Born effective charges.
        """
        r1 = torch.tensor(pos, dtype=torch.float64)  # bohr
        pot, force = self.calculate_energy_forces(r1)  #
        dipole, bec = self.calculate_dipole_born_charges(r1)
        Z = bec.detach().numpy()
        Z = np.reshape(Z, (3, 9)).T
        vir = np.zeros((3, 3))
        extras = {"dipole": dipole.detach().numpy(), "BEC": Z}

        return pot.item(), force.numpy(), vir, extras

    def calculate_pes(self, r1: torch.Tensor) -> torch.Tensor:
        """Calculates the potential energy surface (PES) for a water monomer.

        Args:
            r1 (torch.Tensor): Positions of the atoms in the water monomer.

        Returns:
            torch.Tensor: Potential energy.
        """
        ROH1 = r1[1] - r1[0]
        ROH2 = r1[2] - r1[0]
        RHH = r1[1] - r1[2]
        dROH1 = torch.norm(ROH1)
        dROH2 = torch.norm(ROH2)
        dRHH = torch.norm(RHH)
        costh = torch.dot(ROH1, ROH2) / (dROH1 * dROH2)

        c5z = f5z * c5zA + fbasis * cbasis + fcore * ccore + frest * crest
        deoh = f5z * deohA
        phh1 = f5z * phh1A * torch.exp(phh2)

        exp1 = torch.exp(-alphaoh * (dROH1 - roh))
        exp2 = torch.exp(-alphaoh * (dROH2 - roh))
        Va = deoh * (exp1 * (exp1 - 2.0) + exp2 * (exp2 - 2.0))
        Vb = phh1 * torch.exp(-phh2 * dRHH)

        x1 = (dROH1 - reoh) / reoh
        x2 = (dROH2 - reoh) / reoh
        x3 = costh - costhe

        # Initialize a list to store tensor values for each step
        fmat_list = [torch.zeros(3, dtype=torch.float64)]  # fmat(0,1:3) = 0.d0
        fmat_list.append(torch.ones(3, dtype=torch.float64))  # fmat(1,1:3) = 1.d0

        # Compute fmat recursively without in-place operations
        for j in range(2, 16):
            fmat_list.append(
                torch.stack(
                    [
                        fmat_list[j - 1][0] * x1,
                        fmat_list[j - 1][1] * x2,
                        fmat_list[j - 1][2] * x3,
                    ]
                )
            )

        # Convert list to a single tensor
        fmat = torch.stack(fmat_list)

        efac = torch.exp(-b1 * ((dROH1 - reoh) ** 2 + (dROH2 - reoh) ** 2))

        sum0 = 0.0

        for j in range(1, 244):  # Fortran (2:245) â†’ Python (1, 244)
            inI, inJ, inK = idx[j]  # - 1  # Adjust for 0-based indexing
            sum0 += (
                c5z[j]
                * (fmat[inI, 0] * fmat[inJ, 1] + fmat[inJ, 0] * fmat[inI, 1])
                * fmat[inK, 2]
            )

        Vc = 2.0 * c5z[0] + efac * sum0
        e1 = Va + Vb + Vc
        e1 += 0.44739574026257
        e1 *= 0.00285914375100642899  # cm-1 to Kcal/mol

        return unit_to_internal("energy", "kilocal/mol", e1)

    def calculate_charges(self, r1: torch.Tensor) -> torch.Tensor:
        """Calculates the partial charges for a water monomer.

        Args:
            r1 (torch.Tensor): Positions of the atoms in the water monomer.

        Returns:
            torch.Tensor: Partial charges on the atoms.
        """
        ROH1 = r1[1] - r1[0]
        ROH2 = r1[2] - r1[0]
        # RHH = r1[1] - r1[2]
        dROH1 = torch.norm(ROH1)
        dROH2 = torch.norm(ROH2)
        # dRHH = torch.norm(RHH)
        costh = torch.dot(ROH1, ROH2) / (dROH1 * dROH2)
        efac = torch.exp(-b1 * ((dROH1 - reoh) ** 2 + (dROH2 - reoh) ** 2))

        x1 = (dROH1 - reoh) / reoh
        x2 = (dROH2 - reoh) / reoh
        x3 = costh - costhe

        fmat_list = [
            torch.zeros(3, dtype=r1.dtype, device=r1.device) for _ in range(16)
        ]
        fmat_list[1] = torch.ones(3, dtype=r1.dtype, device=r1.device)
        for j in range(2, 16):
            fmat_list[j] = torch.stack(
                [
                    fmat_list[j - 1][0] * x1,
                    fmat_list[j - 1][1] * x2,
                    fmat_list[j - 1][2] * x3,
                ]
            )
        fmat = torch.stack(fmat_list)

        P1 = 0.0
        P2 = 0.0
        for j in range(2, 84):
            inI, inJ, inK = idxD[j]  # - 1
            P1 = P1 + coefD[j] * fmat[inI, 0] * fmat[inJ, 1] * fmat[inK, 2]
            P2 = P2 + coefD[j] * fmat[inJ, 0] * fmat[inI, 1] * fmat[inK, 2]

        PC0 = (
            0.2999
            * ((dROH1**-0.6932) + (dROH2**-0.6932))
            * (1.0099 + costh * -0.1801 + 0.5 * (3 * costh**2 - 1) * 0.0892)
        )
        P1 = coefD[0] + P1 * efac + PC0 * 0.529177249
        P2 = coefD[0] + P2 * efac + PC0 * 0.529177249

        q3 = torch.stack([-(P1 + P2), P1, P2])  # ,requires_grad=r1.requires_grad)

        return q3

    def calculate_energy_forces(self, r1: torch.Tensor) -> torch.Tensor:
        """Calculates the potential energy surface (PES) and forces for a water monomer.

        Args:
            r1 (torch.Tensor): Positions of the atoms in the water monomer.

        Returns:
            torch.Tensor: Potential energy.
            torch.Tensor: Forces on the atoms.
        """
        # with torch.autograd.set_detect_anomaly(False):
        bohr2ang = unit_to_user("length", "angstrom", 1)
        r1 *= bohr2ang
        r1.requires_grad_(True)
        pes = self.calculate_pes(r1)
        pes.backward()
        forces = -r1.grad
        return pes, forces * bohr2ang

    def calculate_dipole_born_charges(self, r1: torch.Tensor) -> torch.Tensor:
        """Calculates the dipole moment and Born effective charges for a water monomer.

        Args:
            r1 (torch.Tensor): Positions of the atoms in the water monomer.

        Returns:
            torch.Tensor: Dipole moment.
            torch.Tensor: Born effective charges.
        """
        # with torch.autograd.set_detect_anomaly(False):
        r1.requires_grad_(True)
        charges = self.calculate_charges(r1)
        dipole = charges2dipole(charges, r1)
        assert dipole.shape == (3,)
        bec = compute_dipole_jacobian(dipole, r1)
        test = bec.sum(dim=1)
        if torch.mean(test) > 1e-6:
            warning(
                "Born effective charges does not satify acoustic sum rule: ",
                torch.mean(test),
            )
        return dipole, bec


# ---------------------------------------#
def charges2dipole(charges: torch.Tensor, r1: torch.Tensor) -> torch.Tensor:
    return charges[0] * r1[0] + charges[1] * r1[1] + charges[2] * r1[2]


# ---------------------------------------#
def compute_dipole_jacobian(
    dipole: torch.Tensor, positions: torch.Tensor
) -> torch.Tensor:
    """Compute the spatial derivatives of a tensor.

    Args:
        dielectric (torch.Tensor): Dielectric tensor (shape: (3,))
        positions (torch.Tensor): Atom positions (shape: (N, 3))

    Returns:
        torch.Tensor: Spatial derivatives of dielectric tensor (shape: (3,3,3))
    """
    assert dipole.shape == (3,), "wrong shape"

    # Ensure gradients are tracked
    positions.requires_grad_(True)

    # Allocate tensor on the same device as positions
    gradients = positions.new_zeros((3, 3, 3))  # Shape (3,3,3)

    for n in range(3):  # Loop over dielectric tensor components
        grad = torch.autograd.grad(
            dipole[n], positions, create_graph=True, retain_graph=True
        )[
            0
        ]  # Compute gradient w.r.t. positions

        gradients[n, :, :] = grad.clone()  # .flatten()  # Store the gradient

    return gradients


# ---------------------------------------#
# Parameters definitions
# These parameters have been copied from 'drivers/f90/pes/pswater.f90'

idx = torch.zeros((245, 3), dtype=torch.int64)
idx[:, 0] = torch.tensor(
    [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        8,
        8,
        8,
        8,
        8,
        8,
        8,
        8,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        8,
        8,
        8,
        8,
        8,
        8,
        8,
        9,
        9,
        9,
        9,
        9,
        9,
        9,
    ]
)
idx[:, 1] = torch.tensor(
    [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
    ]
)
idx[:, 2] = torch.tensor(
    [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
    ]
)

c5zA = torch.tensor(
    [
        4.2278462684916e04,
        4.5859382909906e-02,
        9.4804986183058e03,
        7.5485566680955e02,
        1.9865052511496e03,
        4.3768071560862e02,
        1.4466054104131e03,
        1.3591924557890e02,
        -1.4299027252645e03,
        6.6966329416373e02,
        3.8065088734195e03,
        -5.0582552618154e02,
        -3.2067534385604e03,
        6.9673382568135e02,
        1.6789085874578e03,
        -3.5387509130093e03,
        -1.2902326455736e04,
        -6.4271125232353e03,
        -6.9346876863641e03,
        -4.9765266152649e02,
        -3.4380943579627e03,
        3.9925274973255e03,
        -1.2703668547457e04,
        -1.5831591056092e04,
        2.9431777405339e04,
        2.5071411925779e04,
        -4.8518811956397e04,
        -1.4430705306580e04,
        2.5844109323395e04,
        -2.3371683301770e03,
        1.2333872678202e04,
        6.6525207018832e03,
        -2.0884209672231e03,
        -6.3008463062877e03,
        4.2548148298119e04,
        2.1561445953347e04,
        -1.5517277060400e05,
        2.9277086555691e04,
        2.6154026873478e05,
        -1.3093666159230e05,
        -1.6260425387088e05,
        1.2311652217133e05,
        -5.1764697159603e04,
        2.5287599662992e03,
        3.0114701659513e04,
        -2.0580084492150e03,
        3.3617940269402e04,
        1.3503379582016e04,
        -1.0401149481887e05,
        -6.3248258344140e04,
        2.4576697811922e05,
        8.9685253338525e04,
        -2.3910076031416e05,
        -6.5265145723160e04,
        8.9184290973880e04,
        -8.0850272976101e03,
        -3.1054961140464e04,
        -1.3684354599285e04,
        9.3754012976495e03,
        -7.4676475789329e04,
        -1.8122270942076e05,
        2.6987309391410e05,
        4.0582251904706e05,
        -4.7103517814752e05,
        -3.6115503974010e05,
        3.2284775325099e05,
        1.3264691929787e04,
        1.8025253924335e05,
        -1.2235925565102e04,
        -9.1363898120735e03,
        -4.1294242946858e04,
        -3.4995730900098e04,
        3.1769893347165e05,
        2.8395605362570e05,
        -1.0784536354219e06,
        -5.9451106980882e05,
        1.5215430060937e06,
        4.5943167339298e05,
        -7.9957883936866e05,
        -9.2432840622294e04,
        5.5825423140341e03,
        3.0673594098716e03,
        8.7439532014842e04,
        1.9113438435651e05,
        -3.4306742659939e05,
        -3.0711488132651e05,
        6.2118702580693e05,
        -1.5805976377422e04,
        -4.2038045404190e05,
        3.4847108834282e05,
        -1.3486811106770e04,
        3.1256632170871e04,
        5.3344700235019e03,
        2.6384242145376e04,
        1.2917121516510e05,
        -1.3160848301195e05,
        -4.5853998051192e05,
        3.5760105069089e05,
        6.4570143281747e05,
        -3.6980075904167e05,
        -3.2941029518332e05,
        -3.5042507366553e05,
        2.1513919629391e03,
        6.3403845616538e04,
        6.2152822008047e04,
        -4.8805335375295e05,
        -6.3261951398766e05,
        1.8433340786742e06,
        1.4650263449690e06,
        -2.9204939728308e06,
        -1.1011338105757e06,
        1.7270664922758e06,
        3.4925947462024e05,
        -1.9526251371308e04,
        -3.2271030511683e04,
        -3.7601575719875e05,
        1.8295007005531e05,
        1.5005699079799e06,
        -1.2350076538617e06,
        -1.8221938812193e06,
        1.5438780841786e06,
        -3.2729150692367e03,
        1.0546285883943e04,
        -4.7118461673723e04,
        -1.1458551385925e05,
        2.7704588008958e05,
        7.4145816862032e05,
        -6.6864945408289e05,
        -1.6992324545166e06,
        6.7487333473248e05,
        1.4361670430046e06,
        -2.0837555267331e05,
        4.7678355561019e05,
        -1.5194821786066e04,
        -1.1987249931134e05,
        1.3007675671713e05,
        9.6641544907323e05,
        -5.3379849922258e05,
        -2.4303858824867e06,
        1.5261649025605e06,
        2.0186755858342e06,
        -1.6429544469130e06,
        -1.7921520714752e04,
        1.4125624734639e04,
        -2.5345006031695e04,
        1.7853375909076e05,
        -5.4318156343922e04,
        -3.6889685715963e05,
        4.2449670705837e05,
        3.5020329799394e05,
        9.3825886484788e03,
        -8.0012127425648e05,
        9.8554789856472e04,
        4.9210554266522e05,
        -6.4038493953446e05,
        -2.8398085766046e06,
        2.1390360019254e06,
        6.3452935017176e06,
        -2.3677386290925e06,
        -3.9697874352050e06,
        -1.9490691547041e04,
        4.4213579019433e04,
        1.6113884156437e05,
        -7.1247665213713e05,
        -1.1808376404616e06,
        3.0815171952564e06,
        1.3519809705593e06,
        -3.4457898745450e06,
        2.0705775494050e05,
        -4.3778169926622e05,
        8.7041260169714e03,
        1.8982512628535e05,
        -2.9708215504578e05,
        -8.8213012222074e05,
        8.6031109049755e05,
        1.0968800857081e06,
        -1.0114716732602e06,
        1.9367263614108e05,
        2.8678295007137e05,
        -9.4347729862989e04,
        4.4154039394108e04,
        5.3686756196439e05,
        1.7254041770855e05,
        -2.5310674462399e06,
        -2.0381171865455e06,
        3.3780796258176e06,
        7.8836220768478e05,
        -1.5307728782887e05,
        -3.7573362053757e05,
        1.0124501604626e06,
        2.0929686545723e06,
        -5.7305706586465e06,
        -2.6200352535413e06,
        7.1543745536691e06,
        -1.9733601879064e04,
        8.5273008477607e04,
        6.1062454495045e04,
        -2.2642508675984e05,
        2.4581653864150e05,
        -9.0376851105383e05,
        -4.4367930945690e05,
        1.5740351463593e06,
        2.4563041445249e05,
        -3.4697646046367e03,
        -2.1391370322552e05,
        4.2358948404842e05,
        5.6270081955003e05,
        -8.5007851251980e05,
        -6.1182429537130e05,
        5.6690751824341e05,
        -3.5617502919487e05,
        -8.1875263381402e02,
        -2.4506258140060e05,
        2.5830513731509e05,
        6.0646114465433e05,
        -6.9676584616955e05,
        5.1937406389690e05,
        1.7261913546007e05,
        -1.7405787307472e04,
        -3.8301842660567e05,
        5.4227693205154e05,
        2.5442083515211e06,
        -1.1837755702370e06,
        -1.9381959088092e06,
        -4.0642141553575e05,
        1.1840693827934e04,
        -1.5334500255967e05,
        4.9098619510989e05,
        6.1688992640977e05,
        2.2351144690009e05,
        -1.8550462739570e06,
        9.6815110649918e03,
        -8.1526584681055e04,
        -8.0810433155289e04,
        3.4520506615177e05,
        2.5509863381419e05,
        -1.3331224992157e05,
        -4.3119301071653e05,
        -5.9818343115856e04,
        1.7863692414573e03,
        8.9440694919836e04,
        -2.5558967650731e05,
        -2.2130423988459e04,
        4.4973674518316e05,
        -2.2094939343618e05,
    ]
)
#
#     expansion coefficients for basis correction
#
cbasis = torch.tensor(
    [
        6.9770019624764e-04,
        -2.4209870001642e01,
        1.8113927151562e01,
        3.5107416275981e01,
        -5.4600021126735e00,
        -4.8731149608386e01,
        3.6007189184766e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -7.7178474355102e01,
        -3.8460795013977e01,
        -4.6622480912340e01,
        5.5684951167513e01,
        1.2274939911242e02,
        -1.4325154752086e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -6.0800589055949e00,
        8.6171499453475e01,
        -8.4066835441327e01,
        -5.8228085624620e01,
        2.0237393793875e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        3.3525582670313e02,
        7.0056962392208e01,
        -4.5312502936708e01,
        -3.0441141194247e02,
        2.8111438108965e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.2983583774779e02,
        3.9781671212935e01,
        -6.6793945229609e01,
        -1.9259805675433e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -8.2855757669957e02,
        -5.7003072730941e01,
        -3.5604806670066e01,
        9.6277766002709e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        8.8645622149112e02,
        -7.6908409772041e01,
        6.8111763314154e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        2.5090493428062e02,
        -2.3622141780572e02,
        5.8155647658455e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        2.8919570295095e03,
        -1.7871014635921e02,
        -1.3515667622500e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -3.6965613754734e03,
        2.1148158286617e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.4795670139431e03,
        3.6210798138768e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -5.3552886800881e03,
        3.1006384016202e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        1.6241824368764e03,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        4.3764909606382e03,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        1.0940849243716e03,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        3.0743267832931e03,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
    ]
)
#
#     expansion coefficients for core correction
#
ccore = torch.tensor(
    [
        2.4332191647159e-02,
        -2.9749090113656e01,
        1.8638980892831e01,
        -6.1272361746520e00,
        2.1567487597605e00,
        -1.5552044084945e01,
        8.9752150543954e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -3.5693557878741e02,
        -3.0398393196894e00,
        -6.5936553294576e00,
        1.6056619388911e01,
        7.8061422868204e01,
        -8.6270891686359e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -3.1688002530217e01,
        3.7586725583944e01,
        -3.2725765966657e01,
        -5.6458213299259e00,
        2.1502613314595e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        5.2789943583277e02,
        -4.2461079404962e00,
        -2.4937638543122e01,
        -1.1963809321312e02,
        2.0240663228078e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -6.2574211352272e02,
        -6.9617539465382e00,
        -5.9440243471241e01,
        1.4944220180218e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.2851139918332e03,
        -6.5043516710835e00,
        4.0410829440249e01,
        -6.7162452402027e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        1.0031942127832e03,
        7.6137226541944e01,
        -2.7279242226902e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -3.3059000871075e01,
        2.4384498749480e01,
        -1.4597931874215e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        1.6559579606045e03,
        1.5038996611400e02,
        -7.3865347730818e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.9738401290808e03,
        -1.4149993809415e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.2756627454888e02,
        4.1487702227579e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.7406770966429e03,
        -9.3812204399266e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.1890301282216e03,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        2.3723447727360e03,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -1.0279968223292e03,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        5.7153838472603e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
    ]
)
#
#     expansion coefficients for v rest
#
crest = torch.tensor(
    [
        0.0000000000000e00,
        -4.7430930170000e00,
        -1.4422132560000e01,
        -1.8061146510000e01,
        7.5186735000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -2.7962099800000e02,
        1.7616414260000e01,
        -9.9741392630000e01,
        7.1402447000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -7.8571336480000e01,
        5.2434353250000e01,
        7.7696745000000e01,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        1.7799123760000e02,
        1.4564532380000e02,
        2.2347226000000e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -4.3823284100000e02,
        -7.2846553000000e02,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        -2.6752313750000e02,
        3.6170310000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
        0.0000000000000e00,
    ]
)

# Expansion indices for mass correction
idxm = torch.tensor(
    [1, 2, 1, 1, 3, 2, 1, 2, 1, 2, 1, 1, 3, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 3],
    dtype=torch.int64,
)

# Expansion coefficients for mass correction
cmass = torch.tensor(
    [
        -8.3554183e00,
        3.7036552e01,
        -5.2722136e00,
        1.6843857e01,
        -7.0929741e01,
        5.5380337e00,
        -2.9962997e01,
        1.3637682e02,
        -3.0530195e00,
    ],
    dtype=torch.float64,
)

# Two body parameters
reoh = torch.tensor(0.958649, dtype=torch.float64)
thetae = torch.tensor(104.3475, dtype=torch.float64)
b1 = torch.tensor(2.0, dtype=torch.float64)
roh = torch.tensor(0.9519607159623009, dtype=torch.float64)
alphaoh = torch.tensor(2.587949757553683, dtype=torch.float64)
deohA = torch.tensor(42290.92019288289, dtype=torch.float64)
phh1A = torch.tensor(16.94879431193463, dtype=torch.float64)
phh2 = torch.tensor(12.66426998162947, dtype=torch.float64)

# Scaling factors for contributions to empirical potential
f5z = torch.tensor(0.999677885, dtype=torch.float64)
fbasis = torch.tensor(0.15860145369897, dtype=torch.float64)
fcore = torch.tensor(-1.6351695982132, dtype=torch.float64)
frest = torch.tensor(1.0, dtype=torch.float64)
costhe = torch.tensor(-0.24780227221366464506e0, dtype=torch.float64)

idxD = torch.zeros((84, 3), dtype=torch.int64)
idxD[:, 0] = torch.tensor(
    [
        1,
        1,
        1,
        2,
        1,
        1,
        1,
        2,
        2,
        3,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        3,
        3,
        4,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        4,
        4,
        5,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        5,
        5,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        6,
        6,
        7,
    ]
)
idxD[:, 1] = torch.tensor(
    [
        1,
        1,
        2,
        1,
        1,
        2,
        3,
        1,
        2,
        1,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        1,
        2,
        1,
        1,
        2,
        3,
        4,
        5,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        1,
        2,
        1,
        1,
        2,
        3,
        4,
        5,
        6,
        1,
        2,
        3,
        4,
        5,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        1,
        2,
        1,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        1,
        2,
        3,
        4,
        5,
        6,
        1,
        2,
        3,
        4,
        5,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        1,
        2,
        1,
    ]
)
idxD[:, 2] = torch.tensor(
    [
        1,
        2,
        1,
        1,
        3,
        2,
        1,
        2,
        1,
        1,
        4,
        3,
        2,
        1,
        3,
        2,
        1,
        2,
        1,
        1,
        5,
        4,
        3,
        2,
        1,
        4,
        3,
        2,
        1,
        3,
        2,
        1,
        2,
        1,
        1,
        6,
        5,
        4,
        3,
        2,
        1,
        5,
        4,
        3,
        2,
        1,
        4,
        3,
        2,
        1,
        3,
        2,
        1,
        2,
        1,
        1,
        7,
        6,
        5,
        4,
        3,
        2,
        1,
        6,
        5,
        4,
        3,
        2,
        1,
        5,
        4,
        3,
        2,
        1,
        4,
        3,
        2,
        1,
        3,
        2,
        1,
        2,
        1,
        1,
    ]
)
coefD = torch.tensor(
    [
        -2.1689686086730e-03,
        1.4910379754728e-02,
        5.3546078430060e-02,
        -7.4055995388666e-02,
        -3.7764333017616e-03,
        1.4089887256484e-01,
        -6.2584207687264e-02,
        -1.1260393113022e-01,
        -5.7824159269319e-02,
        1.4360743650655e-02,
        -1.5469680141070e-02,
        -1.3036350092795e-02,
        2.7515837781556e-02,
        1.4098478875076e-01,
        -2.7663168397781e-02,
        -5.2378176254797e-03,
        -1.0237198381792e-02,
        8.9571999265473e-02,
        7.2920263098603e-03,
        -2.6873260551686e-01,
        2.0220870325864e-02,
        -7.0764766270927e-02,
        1.2140640273760e-01,
        2.0978491966341e-02,
        -1.9443840512668e-01,
        4.0826835370618e-02,
        -4.5365190474650e-02,
        6.2779900072132e-02,
        -1.3194351021000e-01,
        -1.4673032718563e-01,
        1.1894031277247e-01,
        -6.4952851564679e-03,
        8.8503610374493e-02,
        1.4899437409291e-01,
        1.3962841511565e-01,
        -2.6459446720450e-02,
        -5.0128914532773e-02,
        1.8329676428116e-01,
        -1.5559089125095e-01,
        -4.0176879767592e-02,
        3.6192059996636e-01,
        1.0202887240343e-01,
        1.9318668580051e-01,
        -4.3435977107932e-01,
        -4.2080828803311e-02,
        1.9144626027273e-01,
        -1.7851138969948e-01,
        1.0524533875070e-01,
        -1.7954071602185e-02,
        5.2022455612120e-02,
        -2.8891891146828e-01,
        -4.7452036576319e-02,
        -1.0939400546289e-01,
        3.5916564473568e-01,
        -2.0162789820172e-01,
        -3.5838629543696e-01,
        5.6706523551202e-03,
        1.3849337488211e-01,
        -4.1733982195604e-01,
        4.1641570764241e-01,
        -1.2243429796296e-01,
        4.7141730971228e-02,
        -1.8224510249551e-01,
        -1.8880981556620e-01,
        -3.1992359561800e-01,
        -1.8567550546587e-01,
        6.1850530431280e-01,
        -6.1142756235141e-02,
        -1.6996135584933e-01,
        5.4252879499871e-01,
        6.6128603899427e-01,
        1.2107016404639e-02,
        -1.9633639729189e-01,
        2.7652059420824e-03,
        -2.2684111109778e-01,
        -4.7924491598635e-01,
        2.4287790137314e-01,
        -1.4296023329441e-01,
        8.9664665907006e-02,
        -1.4003228575602e-01,
        -1.3321543452254e-01,
        -1.8340983193745e-01,
        2.3426707273520e-01,
        1.5141050914514e-01,
    ],
    dtype=torch.float64,
)

# Additional parameters
b1D = torch.tensor(1.0, dtype=torch.float64)
a = torch.tensor(0.2999, dtype=torch.float64)
b = torch.tensor(-0.6932, dtype=torch.float64)
c0 = torch.tensor(1.0099, dtype=torch.float64)
c1 = torch.tensor(-0.1801, dtype=torch.float64)
c2 = torch.tensor(0.0892, dtype=torch.float64)
